/* Hyprland.h generated by valac 0.56.16, the Vala compiler, do not modify */

#ifndef ___HOME_EM_DESKTOP_CODE_DOCKS_SERVICES_LIBS_HYPRLAND_H__
#define ___HOME_EM_DESKTOP_CODE_DOCKS_SERVICES_LIBS_HYPRLAND_H__

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define HYPR_TYPE_WORKSPACE (hypr_workspace_get_type ())
typedef struct _HyprWorkspace HyprWorkspace;

#define HYPR_TYPE_WINDOW (hypr_window_get_type ())
typedef struct _HyprWindow HyprWindow;

#define TYPE_HYPRLAND (hyprland_get_type ())
#define HYPRLAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HYPRLAND, Hyprland))
#define HYPRLAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_HYPRLAND, HyprlandClass))
#define IS_HYPRLAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HYPRLAND))
#define IS_HYPRLAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_HYPRLAND))
#define HYPRLAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HYPRLAND, HyprlandClass))

typedef struct _Hyprland Hyprland;
typedef struct _HyprlandClass HyprlandClass;
typedef struct _HyprlandPrivate HyprlandPrivate;

struct _HyprWorkspace {
	gint64 id;
	gchar* name;
	gchar* monitor;
	gint64 monitorID;
	gint64 windows;
	gboolean hasfullscreen;
	gchar* lastwindow;
	gchar* lastwindowtitle;
};

struct _HyprWindow {
	gchar* address;
	gboolean mapped;
	gboolean hidden;
	gint64 at[2];
	gint64 size[2];
	HyprWorkspace workspace;
	gboolean floating;
	gboolean pseudo;
	gint64 monitor;
	gchar* class;
	gchar* title;
	gchar* initialClass;
	gchar* initialTitle;
	gint64 pid;
	gboolean xwayland;
	gboolean pinned;
	gint64 fullscreen;
	gint64 fullscreenClient;
	gint64* grouped;
	gint grouped_length1;
	gint64* tags;
	gint tags_length1;
	gchar* swallowing;
	gint64 focusHistoryID;
};

struct _Hyprland {
	GObject parent_instance;
	HyprlandPrivate * priv;
	HyprWorkspace* workspaces;
	gint workspaces_length1;
	HyprWindow* clients;
	gint clients_length1;
	HyprWindow* current_workspace_clients;
	gint current_workspace_clients_length1;
	gint current_workspace_id;
	gint actual_workspace_len;
};

struct _HyprlandClass {
	GObjectClass parent_class;
};

VALA_EXTERN GType hypr_workspace_get_type (void) G_GNUC_CONST ;
VALA_EXTERN HyprWorkspace* hypr_workspace_dup (const HyprWorkspace* self);
VALA_EXTERN void hypr_workspace_free (HyprWorkspace* self);
VALA_EXTERN void hypr_workspace_copy (const HyprWorkspace* self,
                          HyprWorkspace* dest);
VALA_EXTERN void hypr_workspace_destroy (HyprWorkspace* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (HyprWorkspace, hypr_workspace_destroy)
VALA_EXTERN GType hypr_window_get_type (void) G_GNUC_CONST ;
VALA_EXTERN HyprWindow* hypr_window_dup (const HyprWindow* self);
VALA_EXTERN void hypr_window_free (HyprWindow* self);
VALA_EXTERN void hypr_window_copy (const HyprWindow* self,
                       HyprWindow* dest);
VALA_EXTERN void hypr_window_destroy (HyprWindow* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (HyprWindow, hypr_window_destroy)
VALA_EXTERN GType hyprland_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Hyprland, g_object_unref)
VALA_EXTERN Hyprland* hyprland_new (void);
VALA_EXTERN Hyprland* hyprland_construct (GType object_type);
VALA_EXTERN void hyprland_start (Hyprland* self);
VALA_EXTERN gchar* hyprland_dispatch_exec (Hyprland* self,
                               const gchar* command);
VALA_EXTERN void hyprland_dispatch_workspace (Hyprland* self,
                                  gint id);
VALA_EXTERN void hyprland_get_activewindow (Hyprland* self,
                                HyprWindow * result);

G_END_DECLS

#endif
